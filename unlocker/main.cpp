/*
* Copyright (c) 2022-2023, NeKz
* 
* SPDX-License-Identifier: MIT
* 
* 
* This generates the unlock code for SecuROM's manual activation.
* Code is based on on 80_PA.
* 
* Read for more information: https://tem.nekz.me/reversed/securom.html#unlock-code
* 
* Examples output:
*	UB9NU-ZU3LF-6R5ZQ-LPYE5-8C3UH-RGR3P-HX5NP-P6GHQ
*	PKZA9-GUVLN-9ATMR-YGL9G-EVTG7-FC2PH-UDD43-K9G69
*/

#pragma warning(disable : 4002)
#pragma warning(disable : 4996)

#include <iostream>
#include <openssl/md5.h>
#include <openssl/opensslv.h>
#include <openssl/des.h>
#include <Windows.h>
#include <d3d9.h>
#include <iptypes.h>
#include <format>
#include <immintrin.h>
#include "lib/BigDigits/bigd.h"

// TODO
const char* securom_signatures[] = {
	"001D47B0B0981CC4FC00A6ECCC0244A3", // 0
	"8A8ABCAFDA0FC5B6A0A6E16F45321", // 4
	"1CF9DFF37F133D15D21CC4F5ADE91F", // 8
	"B4109B85B0CAFBD73EDDAB05A9881", // 12
};

// Game signature (48 bytes)
// Found in spot check 6
// appid
unsigned char tron_signature[] = {
	// 1st part (16 bytes)
	0xF9, 0x83, 0x7A, 0x1D, 0x22, 0x2F, 0x64, 0x74,
	0x28, 0xCB, 0x13, 0x30, 0x32, 0xD0, 0xD0, 0x0C,
	// 2nd part (32 bytes)
	0xE8, 0x96, 0xD4, 0xE1, 0xBD, 0xFC, 0x0E, 0x37,
	0x8C, 0x8D, 0x17, 0x74, 0x27, 0x27, 0xBC, 0xE0,
	0xE8, 0x96, 0xD4, 0xE1, 0xBD, 0xFC, 0x0E, 0x37,
	0xE8, 0x96, 0xD4, 0xE1, 0xBD, 0xFC, 0x0E, 0x37,
};

struct hwid_t {
	byte unk0;
	byte version_hash;
	WORD cpu_hash;
	byte gpu_hash;
	byte unk1;
	byte network_hash;
	WORD unk2;
	byte unk3;
	WORD disk_hash;
	WORD unk4;
	byte terminator;
};

auto hwid_to_string(hwid_t hwid) -> std::string {
	return std::format("{:02X}", hwid.unk0)
		+ std::format("{:02X}", hwid.version_hash)
		+ std::format("{:04X}", _byteswap_ushort(hwid.cpu_hash))
		+ std::format("{:02X}", hwid.gpu_hash)
		+ std::format("{:02X}", hwid.unk1)
		+ std::format("{:02X}", hwid.network_hash)
		+ std::format("{:04X}", hwid.unk2)
		+ std::format("{:02X}", hwid.unk3)
		+ std::format("{:04X}", _byteswap_ushort(hwid.disk_hash))
		+ std::format("{:04X}", hwid.unk4);
}

auto xor_op(byte* dest, byte* src, DWORD size) -> void {
	for (auto i = 1ul; i <= sizeof(MD5_LONG) * 4ul; ++i) {
		for (auto j = 0ul; j < size; ++j) {
			*(dest + j) ^= *(src++);
		}
	}
}

auto gehwid_t() -> std::string {
	hwid_t hwid = {
		.unk0 = 0x01,
		.unk1 = 0x00,
		.unk2 = 0x0000,//0xcaca,
		.unk3 = 0x00,//0xca,
		.unk4 = 0x0000,
		.terminator = 0x00,
	};

	OSVERSIONINFO osvi = {};
	ZeroMemory(&osvi, 0, sizeof(OSVERSIONINFO));
	osvi.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);
	GetVersionEx(&osvi);

	MD5_CTX ctx = {};

	MD5_Init(&ctx);

	ctx.Nl = 128;
	ctx.Nh = 0;
	ctx.num = MD5_DIGEST_LENGTH;
	ctx.data[0] = osvi.dwMajorVersion;
	ctx.data[1] = osvi.dwMinorVersion;
	ctx.data[2] = osvi.dwBuildNumber;
	ctx.data[3] = osvi.dwPlatformId;

	unsigned long data[32] = {};
	MD5_Final((unsigned char*)&data[0], &ctx);

	xor_op(&hwid.version_hash, (byte*)&data[0], sizeof(hwid_t::version_hash));

	SYSTEM_INFO info = {};
	GetSystemInfo(&info);

	MD5_Init(&ctx);

	ctx.Nl = 128;
	ctx.Nh = 0;
	ctx.num = MD5_DIGEST_LENGTH;
	ctx.data[0] = info.dwProcessorType;
	ctx.data[1] = info.dwAllocationGranularity;
	ctx.data[2] = info.wProcessorLevel;
	ctx.data[3] = info.wProcessorRevision;

	MD5_Final((unsigned char*)&data[0], &ctx);

	xor_op((byte*)&hwid.cpu_hash, (byte*)&data[0], sizeof(hwid_t::cpu_hash));

	auto d3d9Module = LoadLibrary(L"d3d9.dll");
	if (d3d9Module != NULL) {
		D3DADAPTER_IDENTIFIER9 gpu = {};

		typedef PDIRECT3D9(__stdcall* _Direct3DCreate9)(UINT SDKVersion);
		auto Direct3DCreate9 = (_Direct3DCreate9)GetProcAddress((HMODULE)d3d9Module, "Direct3DCreate9");
		auto d3d9 = Direct3DCreate9(D3D_SDK_VERSION);

		d3d9->GetAdapterIdentifier(D3DADAPTER_DEFAULT, 0, &gpu);

		FreeLibrary(d3d9Module);

		MD5_Init(&ctx);

		ctx.Nl = 128;
		ctx.Nh = 0;
		ctx.num = MD5_DIGEST_LENGTH;
		ctx.data[0] = gpu.VendorId;
		ctx.data[1] = gpu.DeviceId;
		ctx.data[2] = gpu.SubSysId;
		ctx.data[3] = gpu.Revision;

		MD5_Final((unsigned char*)&data[0], &ctx);

		xor_op((byte*)&hwid.gpu_hash, (byte*)&data[0], sizeof(hwid_t::gpu_hash));
	}

	auto iphlpapiModule = LoadLibrary(L"IPHLPAPI.dll");
	if (iphlpapiModule != NULL) {
		PIP_ADAPTER_INFO pAdapterInfo = {};
		ULONG ulOutBufLen = sizeof(IP_ADAPTER_INFO) * 8;

		pAdapterInfo = (IP_ADAPTER_INFO*)malloc(sizeof(IP_ADAPTER_INFO) * 8);
		if (!pAdapterInfo) {
			std::cout << "[-] oom :(" << std::endl;
			return "";
		}

		typedef ULONG(__stdcall* _IPHLPAPI_GetAdaptersInfo)(PIP_ADAPTER_INFO AdapterInfo, PULONG SizePointer);
		auto GetAdaptersInfo = (_IPHLPAPI_GetAdaptersInfo)GetProcAddress((HMODULE)iphlpapiModule, "GetAdaptersInfo");

		GetAdaptersInfo(pAdapterInfo, &ulOutBufLen);
		FreeLibrary(iphlpapiModule);

		// TODO: For some reason this is very wrong??
		auto checkForEthernet = true;

		if (pAdapterInfo->Type == MIB_IF_TYPE_ETHERNET && checkForEthernet) {
			MD5_Init(&ctx);

			ctx.Nl = 48;
			ctx.Nh = 0;
			ctx.num = MD5_DIGEST_LENGTH - 10;
			memcpy(&ctx.data[0], pAdapterInfo->Address, sizeof(pAdapterInfo->Address));

			MD5_Final((unsigned char*)&data[0], &ctx);

			xor_op(&hwid.network_hash, (byte*)&data[0], sizeof(hwid_t::network_hash));
		}

		free((void*)pAdapterInfo);
	}

	char volumeNameBuffer[MAX_PATH] = {};
	char fileSystemNameBuffer[MAX_PATH] = {};
	DWORD volumeSerialNumber = 0;
	DWORD maximumComponentLength = 0;
	DWORD fileSystemFlags = 0;

	char volume_name[4] = "c:\\";

	for (; volume_name[0] <= *"z"; ++volume_name[0]) {
		auto dtype = GetDriveTypeA((LPCSTR)&volume_name[0]);
		//std::cout << std::format("[+] volume_name: {} (dtype = {})", volume_name, dtype) << std::endl;

		if (dtype != DRIVE_FIXED) {
			continue;
		}

		GetVolumeInformationA(
			(LPCSTR)&volume_name,
			(LPSTR)volumeNameBuffer,
			sizeof(volumeNameBuffer),
			&volumeSerialNumber,
			&maximumComponentLength,
			&fileSystemFlags,
			(LPSTR)fileSystemNameBuffer,
			sizeof(fileSystemNameBuffer)
		);

		std::cout << std::format("[+] volume {} with serial number: {}", volume_name, volumeSerialNumber) << std::endl;

		break;
	}

	MD5_Init(&ctx);

	ctx.Nl = 32;
	ctx.Nh = 0;
	ctx.num = 4;
	ctx.data[0] = _byteswap_ulong(volumeSerialNumber);

	MD5_Final((unsigned char*)&data[0], &ctx);

	xor_op((byte*)&hwid.disk_hash, (byte*)&data[0], sizeof(hwid_t::disk_hash));

	std::cout << std::format("[+] version_hash: {:02x}", hwid.version_hash) << std::endl;
	std::cout << std::format("[+] cpu_hash: {:02x}", _byteswap_ushort(hwid.cpu_hash)) << std::endl;
	std::cout << std::format("[+] gpu_hash: {:02x}", hwid.gpu_hash) << std::endl;
	std::cout << std::format("[+] network_hash: {:02x}", hwid.network_hash) << std::endl;
	std::cout << std::format("[+] disk_hash: {:02x}", _byteswap_ushort(hwid.disk_hash)) << std::endl;

	return hwid_to_string(hwid);
}

auto string_to_hex(const std::string& input) -> std::string {
	static const char hex_digits[] = "0123456789ABCDEF";

	std::string output;
	output.reserve(input.length() * 2);
	for (unsigned char c : input) {
		output.push_back(hex_digits[c >> 4]);
		output.push_back(hex_digits[c & 15]);
	}
	return output;
}

auto convert_int_to_hex(unsigned int count, char* buf) -> int
{
	char* buf_1; // eax@1
	unsigned int count_1; // ebp@1
	unsigned int v4; // edi@2
	unsigned int v5; // ecx@2
	char* v6; // edx@6
	char* v7; // ebp@6
	int result; // eax@7

	buf_1 = buf;
	count_1 = count;

	do
	{
		v4 = count_1 & 0xF;
		count_1 >>= 4;
		v5 = v4 << 24;

		if (v4 <= 9) {
			*buf++ = (v5 + 0x30000000) >> 24;
		} else {
			*buf++ = (v5 + 0x57000000) >> 24;
		}
	} while (count_1);

	*buf = 0;
	v6 = buf - 1;
	v7 = buf_1;

	do {
		result = *v6;
		*v6 = *v7;
		*v7 = result;
		--v6;
		++v7;
	} while (v7 < v6);

	return result;
}

const char ascii_table[104] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x00
};

auto convert_hex_to_bytes(char* new_buf, char* buf, unsigned int length) -> char*
{
	char* result; // eax@1
	char* buf_next; // ebx@1
	unsigned int v5; // ecx@1
	char* result_1; // esi@2

	result = new_buf;
	buf_next = buf + 1;
	v5 = length >> 1;

	if (length >> 1) {
		result_1 = result;

		do {
			*result_1++ = ((16 * ascii_table[*buf]) | ascii_table[*buf_next]);
			buf_next += 2;
			buf += 2;
			--v5;
		} while (v5);
	}

	return result;
}

auto main2() -> int {
	char sbuf[32] = {};
	char buf[32] = { 0x41, 0x42 };

	std::cout << std::format("[+] buf: {}", buf) << std::endl;
	convert_hex_to_bytes(sbuf, buf, 2);
	std::cout << std::format("[+] sbuf: {}", sbuf) << std::endl;

	return 0;
}

auto figure_out_what_this_does_4(unsigned char *data, int data_length, unsigned char *buf, int length) -> signed int
{
	unsigned int v4; // esi@4
	signed int v5; // ecx@4
	signed int v6; // ebx@4
	unsigned int v7; // edx@4
	int v8; // ebp@4
	int v9; // edi@6
	signed int result; // eax@11

	if (data && buf) {
		if (length > 0) {
			v4 = 31;
			v5 = 0;
			v6 = 1;
			v7 = 0;
			v8 = 0;

			do {
				if (v6 >= data_length) {
					v9 = 0;
				} else {
					v9 = data[v6];
				}

				v7 = data[v6 - 1] | ((v9 << 8) | v7 & 0xFFFF00FF) & 0xFFFFFF00;
				buf[v8] = (v7 & v4) >> v5;
				v5 += 5;
				++v8;
				v4 *= 32;

				if (v5 >= 8) {
					++v6;
					v4 >>= 8;
					v5 -= 8;
				}
			} while (v8 < length);
		}
		result = 1;
	} else {
		result = 0;
	}

  return result;
}

auto decode_to_ascii(char *a1, char *buf, unsigned int length) -> signed int
{
	char *v3; // ecx@1
	unsigned int v4; // ebx@2
	char *v5; // esi@2
	unsigned int v6; // eax@3
	unsigned int v7; // eax@17

	v3 = buf;
	if (!length) {
		return 1;
	}

	v4 = 0;
	v5 = a1;
	while (1) {
		v6 = *v5;
		if (v6 <= 7) { // 2-9
			*v3 = ((v6 << 24) + 0x32000000) >> 24;
			goto LABEL_17;
		}
		if (v6 >= 8 && v6 <= 0xF) { // A-H
			*v3 = ((v6 << 24) + 0x39000000) >> 24;
			goto LABEL_17;
		}
		if (v6 < 0x10) {
			if (v6 < 0x15) {
				return 0;
			}
			goto LABEL_13;
		}
		if (v6 <= 0x14) { // D-N
			*v3 = ((v6 << 24) + 0x3A000000) >> 24;
			goto LABEL_17;
		}
		if (v6 < 0x15 || v6 > 0x1F) {
			return 0;
		}
LABEL_13:
		*v3 = ((v6 << 24) + 0x3B000000) >> 24;
LABEL_17:
		++v3;
		++v5;
		v7 = v4++;
		if (v7 >= length) {
			return 1;
		}
	}
}

auto insert_hyphens(char* input, char* output, int length, int group_length) -> int
{
	char *input_1; // edx@1
	int length_1; // ecx@1
	char *output_1; // esi@1
	int group_length_1; // ebx@1
	int remaining; // eax@2

	input_1 = input;
	length_1 = length;
	output_1 = output;
	group_length_1 = group_length;

	do {
		remaining = group_length_1--;
		if (remaining) {
			*output_1++ = *input_1++;
			--length_1;
		} else {
			*output_1++ = '-';
			group_length_1 = group_length;
		}
	}
	while (length_1);

	*input_1 = 0;

	return 1;
}

auto print_buffer(const char* prefix, unsigned char* buf, size_t size) -> void;
auto println(const char* txt) -> void;

auto more_xoring(char* data, int data_length, char* buf, size_t length) -> void
{
	std::cout << "more_xoring" << std::endl;
	if (length == 1) {
		print_buffer("[+] data: ", (unsigned char*)data, data_length);
		std::cout << "[+] data: 46A817DD" << std::endl;
		print_buffer("[+] buf: ", (unsigned char*)buf, data_length * length);
		std::cout << "[+] buf: 0001C722" << std::endl  << std::endl;
	} else {
		print_buffer("[+] data: ", (unsigned char*)data, data_length);
		std::cout << "[+] data: FDFB582E97D2A0AC950105EDEC5AA61F" << std::endl;
		print_buffer("[+] buf: ", (unsigned char*)buf, data_length * length);
		std::cout << "[+] buf: 00000000000B140AD61691106CC4AE788ABF7EFF110000000000000000000000" << std::endl  << std::endl;
	                              // 0B140AD61691106CC4AE788ABF7EFF11 FF9800FCE91900720000000000
	}

	size_t length_1; // esi@1
	signed int buf_end; // edx@1
	int result; // eax@1
	char* ptr; // ebp@2
	size_t index; // ebx@2
	size_t offset; // ecx@2
	size_t data_index; // edx@3
	size_t buf_end_1; // [sp+Ch] [bp-Ch]@2
	int total; // [sp+10h] [bp-8h]@2

	memset(buf, 0, length);
	length_1 = length;
	buf_end = -(signed int)buf;
	result = 0;

	do {
		ptr = buf;
		total = result;
		buf_end_1 = buf_end;
		index = length_1;
		offset = (size_t)buf + buf_end;

		do {
			data_index = offset++ % data_length;
			unsigned char temp = *(data + data_index);
			*ptr ^= temp;
			++ptr;
			--index;
		} while (index);

		length_1 = length;
		result += length;
		buf_end = length + buf_end_1;
	} while ((length + total) < data_length);
}

#define BYTEn(x, n) (*((char*)&(x)+n))
#define BYTE1(x) BYTEn(x, 1)
#define BYTE2(x) BYTEn(x, 2)
#define BYTE3(x) BYTEn(x, 3)
#define BYTE4(x)   BYTEn(x,  4)
#define WORDn(x, n)   (*((WORD*)&(x)+n))
#define WORD1(x)   WORDn(x,  1)
#define HIWORD(x)   (*((WORD*)&(x)+1))
#define LOW_IND(x,part_type)   0
#define LOBYTE(x)  BYTEn(x,LOW_IND(x,BYTE))

auto encrypt_with_des(unsigned char* cblock, char* data, char* buf, size_t length) -> void
{
	println("[+] encrypt_with_des");
	std::cout << length << std::endl;

	if (length == 19) {
		print_buffer("[+] cblock: ", cblock, 17);
		println("[+] cblock: F9837A1D222F64744CD0D0A5A80B62DB61");

		print_buffer("[+] data: ", (unsigned char*)data, length);
		println("[+] data: 000000537FB09EF0F6466B638F66FADF0F4F11");

		print_buffer("[+] buf : ", (unsigned char*)buf, length);
		println("[+] buf : 000000537FB09EF0F6466B638F66FADF0F4F11");

		std::cout << "[+] length: " << length << std::endl;
		println("[+] length: 19");
	} else {
		print_buffer("[+] cblock: ", cblock, 17);
		println("[+] cblock: CB57D42C2BC90F0B1D8755F761E5FEF6");

		print_buffer("[+] data: ", (unsigned char*)data, length);
		println("[+] data: 2401C72265A1E0AA94B19ACCD972118F68211865257A7522EC");

		print_buffer("[+] buf : ", (unsigned char*)buf, length);
		println("[+] buf : FDFB582E97D2A0AC950105EDEC5AA61F000000000000000000");

		std::cout << "[+] length: " << length << std::endl;
		println("[+] length: 25");
	}

	*(cblock + 0) ^= *(cblock + 8);
	*(cblock + 1) ^= *(cblock + 9);
	*(cblock + 2) ^= *(cblock + 10);
	*(cblock + 3) ^= *(cblock + 11);

	*(cblock + 4) ^= *(cblock + 12);
	*(cblock + 5) ^= *(cblock + 13);
	*(cblock + 6) ^= *(cblock + 14);
	*(cblock + 7) ^= *(cblock + 15);

	*(cblock + 8) ^= *(cblock + 16);
	
	if (length == 19) {
		print_buffer("[+] cblock: ", cblock, 17);
		println("[+] cblock: B553AAB88A2406AF2DD0D0A5A80B62DB61");
	} else {
		print_buffer("[+] cblock: ", cblock, 17);
		println("[+] cblock: D6D081DB4A2CF1FDA88755F761E5FEF6");
	}

	DES_key_schedule sch_key = {};

	DES_set_key_unchecked((const_DES_cblock*)cblock, &sch_key);
	
	DES_cblock result =  {};

	DES_cfb_encrypt((unsigned char*)data, (unsigned char*)buf, 8, length, &sch_key, &result, DES_ENCRYPT);

	if (length == 19) {
		print_buffer("[+] buf : ", (unsigned char*)buf, length);
		println("[+] buf : 22AC0F80FA61AE816125488D9A8E7152FDB02E");
	} else {
		print_buffer("[+] buf : ", (unsigned char*)buf, length);
		println("[+] buf : 3A1DAABF0EB2913BBE95D5B36154D0EFBA1BEAEB83D64ADCB3");
	}

	std::cout << std::endl;
}

auto println(const char* txt) -> void {
	std::cout << txt << std::endl << std::endl;
}

auto print_buffer(const char* prefix, unsigned char* buf, size_t size) -> void {
	auto dataPtr = buf;
	auto dataPtrIdx = 0;
	std::cout << prefix;
	while (dataPtrIdx < size) {
		std::cout << std::format("{:02X}", dataPtr[dataPtrIdx++]);
	}
	std::cout << std::endl;
}

auto print_buffer_ascii(const char* prefix, unsigned char* buf, size_t size) -> void {
	auto dataPtr = buf;
	auto dataPtrIdx = 0;
	std::cout << prefix;
	while (dataPtrIdx < size) {
		std::cout << dataPtr[dataPtrIdx++];
	}
	std::cout << std::endl;
}

int des_sbox_1[] = {
	0x808200, 0x0, 0x8000, 0x808202, 0x808002, 0x8202, 0x2, 0x8000, 0x200, 0x808200,
	0x808202, 0x200, 0x800202, 0x808002, 0x800000, 0x2, 0x202, 0x800200, 0x800200,
	0x8200, 0x8200, 0x808000, 0x808000, 0x800202, 0x8002, 0x800002, 0x800002, 0x8002,
	0x0, 0x202, 0x8202, 0x800000, 0x8000, 0x808202, 0x2, 0x808000, 0x808200, 0x800000,
	0x800000, 0x200, 0x808002, 0x8000, 0x8200, 0x800002, 0x200, 0x2, 0x800202, 0x8202,
	0x808202, 0x8002, 0x808000, 0x800202, 0x800002, 0x202, 0x8202, 0x808200, 0x202,
	0x800200, 0x800200, 0x0, 0x8002, 0x8200, 0x0, 0x808002,
};
int des_sbox_2[] = {
	0x80401000, 0x80001040, 0x80001040, 0x40, 0x401040, 0x80400040, 0x80400000,
	0x80001000, 0x0, 0x401000, 0x401000, 0x80401040, 0x80000040, 0x0, 0x400040, 0x80400000,
	0x80000000, 0x1000, 0x400000, 0x80401000, 0x40, 0x400000, 0x80001000, 0x1040,
	0x80400040, 0x80000000, 0x1040, 0x400040, 0x1000, 0x401040, 0x80401040, 0x80000040,
	0x400040, 0x80400000, 0x401000, 0x80401040, 0x80000040, 0x0, 0x0, 0x401000, 0x1040,
	0x400040, 0x80400040, 0x80000000, 0x80401000, 0x80001040, 0x80001040, 0x40,
	0x80401040, 0x80000040, 0x80000000, 0x1000, 0x80400000, 0x80001000, 0x401040,
	0x80400040, 0x80001000, 0x1040, 0x400000, 0x80401000, 0x40, 0x400000, 0x1000,
	0x401040,
};
int des_sbox_3[] = {
	0x40084010, 0x40004000, 0x4000, 0x84010, 0x80000, 0x10, 0x40080010, 0x40004010,
	0x40000010, 0x40084010, 0x40084000, 0x40000000, 0x40004000, 0x80000, 0x10,
	0x40080010, 0x84000, 0x80010, 0x40004010, 0x0, 0x40000000, 0x4000, 0x84010, 0x40080000,
	0x80010, 0x40000010, 0x0, 0x84000, 0x4010, 0x40084000, 0x40080000, 0x4010, 0x0,
	0x84010, 0x40080010, 0x80000, 0x40004010, 0x40080000, 0x40084000, 0x4000, 0x40080000,
	0x40004000, 0x10, 0x40084010, 0x84010, 0x10, 0x4000, 0x40000000, 0x4010, 0x40084000,
	0x80000, 0x40000010, 0x80010, 0x40004010, 0x40000010, 0x80010, 0x84000, 0x0,
	0x40004000, 0x4010, 0x40000000, 0x40080010, 0x40084010, 0x84000,
};
int des_sbox_4[] = {
	0x80, 0x1040080, 0x1040000, 0x21000080, 0x40000, 0x80, 0x20000000, 0x1040000,
	0x20040080, 0x40000, 0x1000080, 0x20040080, 0x21000080, 0x21040000, 0x40080,
	0x20000000, 0x1000000, 0x20040000, 0x20040000, 0x0, 0x20000080, 0x21040080,
	0x21040080, 0x1000080, 0x21040000, 0x20000080, 0x0, 0x21000000, 0x1040080, 0x1000000,
	0x21000000, 0x40080, 0x40000, 0x21000080, 0x80, 0x1000000, 0x20000000, 0x1040000,
	0x21000080, 0x20040080, 0x1000080, 0x20000000, 0x21040000, 0x1040080, 0x20040080,
	0x80, 0x1000000, 0x21040000, 0x21040080, 0x40080, 0x21000000, 0x21040080, 0x1040000,
	0x0, 0x20040000, 0x21000000, 0x40080, 0x1000080, 0x20000080, 0x40000, 0x0, 0x20040000,
	0x1040080, 0x20000080,
};
int des_sbox_5[] = {
	0x100000, 0x2100001, 0x2000401, 0x0, 0x400, 0x2000401, 0x100401, 0x2100400, 0x2100401,
	0x100000, 0x0, 0x2000001, 0x1, 0x2000000, 0x2100001, 0x401, 0x2000400, 0x100401,
	0x100001, 0x2000400, 0x2000001, 0x2100000, 0x2100400, 0x100001, 0x2100000,
	0x400, 0x401, 0x2100401, 0x100400, 0x1, 0x2000000, 0x100400, 0x2000000, 0x100400,
	0x100000, 0x2000401, 0x2000401, 0x2100001, 0x2100001, 0x1, 0x100001, 0x2000000,
	0x2000400, 0x100000, 0x2100400, 0x401, 0x100401, 0x2100400, 0x401, 0x2000001,
	0x2100401, 0x2100000, 0x100400, 0x0, 0x1, 0x2100401, 0x0, 0x100401, 0x2100000, 0x400,
	0x2000001, 0x2000400, 0x400, 0x100001,
};
int des_sbox_6[] = {
	0x104, 0x4010100, 0x0, 0x4010004, 0x4000100, 0x0, 0x10104, 0x4000100, 0x10004,
	0x4000004, 0x4000004, 0x10000, 0x4010104, 0x10004, 0x4010000, 0x104, 0x4000000,
	0x4, 0x4010100, 0x100, 0x10100, 0x4010000, 0x4010004, 0x10104, 0x4000104, 0x10100,
	0x10000, 0x4000104, 0x4, 0x4010104, 0x100, 0x4000000, 0x4010100, 0x4000000, 0x10004,
	0x104, 0x10000, 0x4010100, 0x4000100, 0x0, 0x100, 0x10004, 0x4010104, 0x4000100,
	0x4000004, 0x100, 0x0, 0x4010004, 0x4000104, 0x10000, 0x4000000, 0x4010104, 0x4,
	0x10104, 0x10100, 0x4000004, 0x4010000, 0x4000104, 0x104, 0x4010000, 0x10104,
	0x4, 0x4010004, 0x10100,
};
int des_sbox_7[] = {
	0x10000008, 0x10200000, 0x2000, 0x10202008, 0x10200000, 0x8, 0x10202008, 0x200000,
	0x10002000, 0x202008, 0x200000, 0x10000008, 0x200008, 0x10002000, 0x10000000,
	0x2008, 0x0, 0x200008, 0x10002008, 0x2000, 0x202000, 0x10002008, 0x8, 0x10200008,
	0x10200008, 0x0, 0x202008, 0x10202000, 0x2008, 0x202000, 0x10202000, 0x10000000,
	0x10002000, 0x8, 0x10200008, 0x202000, 0x10202008, 0x200000, 0x2008, 0x10000008,
	0x200000, 0x10002000, 0x10000000, 0x2008, 0x10000008, 0x10202008, 0x202000,
	0x10200000, 0x202008, 0x10202000, 0x0, 0x10200008, 0x8, 0x2000, 0x10200000, 0x202008,
	0x2000, 0x200008, 0x10002008, 0x0, 0x10202000, 0x10000000, 0x200008, 0x10002008,
};
int des_sbox_8[] = {
	0x8000820, 0x800, 0x20000, 0x8020820, 0x8000000, 0x8000820, 0x20, 0x8000000,
	0x20020, 0x8020000, 0x8020820, 0x20800, 0x8020800, 0x20820, 0x800, 0x20, 0x8020000,
	0x8000020, 0x8000800, 0x820, 0x20800, 0x20020, 0x8020020, 0x8020800, 0x820,
	0x0, 0x0, 0x8020020, 0x8000020, 0x8000800, 0x20820, 0x20000, 0x20820, 0x20000,
	0x8020800, 0x800, 0x20, 0x8020020, 0x800, 0x20820, 0x8000800, 0x20, 0x8000020,
	0x8020000, 0x8020020, 0x8000000, 0x20000, 0x8000820, 0x0, 0x8020820, 0x20020,
	0x8000020, 0x8020000, 0x8000800, 0x8000820, 0x0, 0x8020820, 0x20800, 0x20800,
	0x820, 0x820, 0x20020, 0x8000000, 0x8020800,
};

BYTE unk_des_mask2[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00
};

BYTE unk_des_mask[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80
};

auto des_encrypt_with_sbox(BYTE *data, BYTE *buf, int length) -> signed int
{
	signed int index; // ebx@1
  unsigned int number; // ecx@3
  BYTE *current_byte; // edx@3
  BYTE* byte_mask; // esi@3
  signed int bits; // eax@3
  BYTE v8; // bl@6
  unsigned int v9; // edx@6
  unsigned int v10; // edx@6
  unsigned int v11; // ecx@6
  unsigned int v12; // edx@6
  unsigned int v13; // esi@6
  unsigned int v14; // edi@6
  unsigned int v15; // edx@6
  unsigned int v16; // ecx@6
  unsigned int v17; // esi@6
  unsigned int v18; // edx@6
  unsigned int v19; // ecx@6
  unsigned int v20; // esi@6
  unsigned int v21; // edx@6
  unsigned int v22; // ecx@6
  unsigned int v23; // esi@6
  unsigned int v24; // edi@6
  unsigned int v25; // ecx@6
  unsigned int v26; // esi@6
  unsigned int v27; // edi@6
  unsigned int v28; // ecx@6
  unsigned int v29; // edi@6
  unsigned int v30; // esi@6
  unsigned int v31; // edi@6
  unsigned int v32; // ecx@6
  unsigned int v33; // esi@6
  unsigned int v34; // edx@6
  unsigned int v35; // ecx@6
  unsigned int v36; // edi@6
  char v37; // bl@6
  BYTE *current_buf_ptr; // ecx@6
  signed int index_1; // esi@6
  unsigned int v40; // ebx@7
  BYTE* byte_mask_1; // edi@7
  signed int bits_1; // eax@7
  BYTE *v43; // edx@7
  BYTE *data_2; // edx@10
  BYTE result_buffer[20] = {}; // [sp+0h] [bp-44h]@1
  BYTE buffer[24] = {}; // [sp+14h] [bp-30h]@2
  int offset; // [sp+2Ch] [bp-18h]@1
  int length_1; // [sp+34h] [bp-10h]@1
  BYTE *data_1; // [sp+38h] [bp-Ch]@1
  BYTE *buf_ptr; // [sp+54h] [bp+10h]@2

  index = 0;
  *(unsigned int*)&result_buffer[12] = 0;
  *(unsigned int*)&result_buffer[16] = 0;
  data_1 = data;
  length_1 = length;
  do
  {
    *(unsigned int*)buffer = *(unsigned int*)&result_buffer[12];
    *(unsigned int*)&buffer[4] = *(unsigned int*)&result_buffer[16];
    *(unsigned int*)&buffer[8] = 0;
    *(unsigned int*)&buffer[12] = 0;
    buf_ptr = buffer;
    do
    {
      number = (unsigned __int8)*buf_ptr;
      current_byte =  &buffer[8];
      byte_mask = 8 * (index + (number >> 4)) + unk_des_mask;
      bits = 8;
	  //std::cout << "number = 0x" << std::hex << number << std::dec << std::endl;
      do
      {
        *current_byte |= *byte_mask | *(BYTE*)(8 * ((number & 0xF) - (number >> 4)) + 128 + byte_mask);
	    //std::cout << "*current_byte = 0x" << std::hex << (int)*current_byte << std::dec << std::endl;
        ++current_byte;
        ++byte_mask;
        --bits;
      }
      while ( bits );
      index += 32;
      buf_ptr = (buf_ptr + 1);
    }
    while ( index < 256 );
    *(unsigned int*)&buffer[16] = *(unsigned int*)&buffer[8];
    v8 = buffer[17];
    buffer[19] = buffer[8];
    buffer[16] = buffer[11];
    buffer[17] = buffer[10];
    buffer[23] = buffer[12];
    buffer[20] = buffer[15];
    buffer[22] = buffer[13];
    buffer[21] = buffer[14];
    v9 = (*(unsigned int*)&buffer[20] >> 1) | (*(unsigned int*)&buffer[20] << 31);
    v10 = des_sbox_2[((v9 ^ 0x68000) >> 14) & 0x3F] | des_sbox_7[((v9 >> 6) ^ 0xFFFFFFF2) & 0x3F] | des_sbox_4[((v9 >> 10) ^ 0xFFFFFFF1) & 0x3F] | des_sbox_1[((v9 >> 26) ^ 0xFFFFFFF1) & 0x3F] | des_sbox_6[((v9 >> 18) ^ 0xFFFFFFED) & 0x3F] | des_sbox_5[((v9 ^ 0x38) >> 2) & 0x3F] | des_sbox_3[((v9 ^ 0x1800000) >> 22) & 0x3F] | des_sbox_8[((2 * *(unsigned int*)&buffer[20] | (*(unsigned int*)&buffer[20] >> 31)) ^ 0xFFFFFFF7) & 0x3F];
    buffer[18] = v8;
    v11 = v10 ^ *(unsigned int*)&buffer[16];
    v12 = ((v10 ^ *(unsigned int*)&buffer[16]) >> 1) | ((v10 ^ *(unsigned int*)&buffer[16]) << 31);
    v13 = (des_sbox_1[(v12 ^ 0x24000000) >> 26] | des_sbox_2[((v12 >> 14) ^ 0xFFFFFFF6) & 0x3F] | des_sbox_4[((v12 >> 10) ^ 0xFFFFFFED) & 0x3F] | des_sbox_3[((v12 >> 22) ^ 0xFFFFFFE4) & 0x3F] | des_sbox_5[((v12 ^ 0x34) >> 2) & 0x3F] | des_sbox_6[((v12 ^ 0x3C0000) >> 18) & 0x3F] | des_sbox_7[((v12 ^ 0x780) >> 6) & 0x3F] | des_sbox_8[((2 * v11 | (v11 >> 31)) ^ 0x13) & 0x3F]) ^ *(unsigned int*)&buffer[20];
    v14 = (v13 >> 1) | (v13 << 31);
    v15 = des_sbox_4[(((v14 ^ 0x7400) >> 8) >> 2) & 0x3F]
		| des_sbox_7[((v14 >> 6) ^ 0xFFFFFFFA) & 0x3F]
		| des_sbox_6[((v14 ^ 0x100000) >> 18) & 0x3F]
		| des_sbox_1[((v14 >> 26) ^ 0xFFFFFFEF) & 0x3F]
		| des_sbox_3[((v14 >> 22) ^ 0xFFFFFFE5) & 0x3F]
		| des_sbox_5[((v14 ^ 0x64) >> 2) & 0x3F]
		| des_sbox_2[((v14 ^ 0x14000) >> 14) & 0x3F];
    *(unsigned int*)&buffer[20] = v13;
    v16 = (v15 | des_sbox_8[((2 * v13 | (v13 >> 31)) ^ 6) & 0x3F]) ^ v11;
    v17 = (des_sbox_1[(((v16 >> 1) | (v16 << 31)) ^ 0x8000000) >> 26] | des_sbox_4[~(((v16 >> 1) | (v16 << 31)) >> 10) & 0x3F] | des_sbox_2[((((v16 >> 1) | (v16 << 31)) >> 14) ^ 0xFFFFFFF9) & 0x3F] | des_sbox_3[((((v16 >> 1) | (v16 << 31)) >> 22) ^ 0xFFFFFFF0) & 0x3F] | des_sbox_6[((((v16 >> 1) | (v16 << 31)) ^ 0x340000) >> 18) & 0x3F] | des_sbox_5[((((v16 >> 1) | (v16 << 31)) ^ 0x5C) >> 2) & 0x3F] | des_sbox_7[((((v16 >> 1) | (v16 << 31)) ^ 0x280) >> 6) & 0x3F] | des_sbox_8[((2 * v16 | (v16 >> 31)) ^ 0xE) & 0x3F]) ^ v13;
    v18 = des_sbox_1[((((v17 >> 1) | (v17 << 31)) >> 26) ^ 0xFFFFFFE3) & 0x3F] | des_sbox_5[((((v17 >> 1) | (v17 << 31)) ^ 0x6C) >> 2) & 0x3F] | des_sbox_7[((((v17 >> 1) | (v17 << 31)) ^ 0x3C0) >> 6) & 0x3F] | des_sbox_3[((((v17 >> 1) | (v17 << 31)) ^ 0x5400000) >> 22) & 0x3F] | des_sbox_4[((((v17 >> 1) | (v17 << 31)) ^ 0x2C00) >> 10) & 0x3F];
    *(unsigned int*)&buffer[20] = v17;
    v19 = (des_sbox_2[((((v17 >> 1) | (v17 << 31)) >> 14) ^ 0xFFFFFFFD) & 0x3F] | des_sbox_6[((((v17 >> 1) | (v17 << 31)) ^ 0x80000) >> 18) & 0x3F] | v18 | des_sbox_8[((2 * v17 | (v17 >> 31)) ^ 0xF) & 0x3F]) ^ v16;
    v20 = (des_sbox_4[((((v19 >> 1) | (v19 << 31)) ^ 0x7C00) >> 10) & 0x3F] | des_sbox_2[((((v19 >> 1) | (v19 << 31)) ^ 0x20000) >> 14) & 0x3F] | des_sbox_7[((((v19 >> 1) | (v19 << 31)) >> 6) ^ 0xFFFFFFEF) & 0x3F] | des_sbox_6[((((v19 >> 1) | (v19 << 31)) >> 18) ^ 0xFFFFFFEF) & 0x3F] | des_sbox_3[((((v19 >> 1) | (v19 << 31)) >> 22) ^ 0xFFFFFFF0) & 0x3F] | des_sbox_1[((((v19 >> 1) | (v19 << 31)) >> 26) ^ 0xFFFFFFE5) & 0x3F] | des_sbox_5[((((v19 >> 1) | (v19 << 31)) ^ 0x4C) >> 2) & 0x3F] | des_sbox_8[((2 * v19 | (v19 >> 31)) ^ 0xFFFFFFE3) & 0x3F]) ^ v17;
    v21 = des_sbox_3[((((v20 >> 1) | (v20 << 31)) >> 22) ^ 0xFFFFFFE7) & 0x3F] | des_sbox_2[((((v20 >> 1) | (v20 << 31)) >> 14) ^ 0xFFFFFFE1) & 0x3F];
    *(unsigned int*)&buffer[20] = v20;
    v22 = (des_sbox_1[(((v20 >> 1) | (v20 << 31)) ^ 0x18000000) >> 26] | des_sbox_5[((((v20 >> 1) | (v20 << 31)) >> 2) ^ 0xFFFFFFF5) & 0x3F] | des_sbox_7[((((v20 >> 1) | (v20 << 31)) >> 6) ^ 0xFFFFFFEC) & 0x3F] | des_sbox_4[((((v20 >> 1) | (v20 << 31)) >> 10) ^ 0xFFFFFFEB) & 0x3F] | des_sbox_6[((((v20 >> 1) | (v20 << 31)) >> 18) ^ 0xFFFFFFEA) & 0x3F] | v21 | des_sbox_8[((2 * v20 | (v20 >> 31)) ^ 0xFFFFFFEB) & 0x3F]) ^ v19;
    v23 = (des_sbox_5[((((v22 >> 1) | (v22 << 31)) >> 2) ^ 0xFFFFFFFD) & 0x3F] | des_sbox_2[((((v22 >> 1) | (v22 << 31)) ^ 0x30000) >> 14) & 0x3F] | des_sbox_7[((((v22 >> 1) | (v22 << 31)) >> 6) ^ 0xFFFFFFEF) & 0x3F] | des_sbox_6[((((v22 >> 1) | (v22 << 31)) >> 18) ^ 0xFFFFFFF5) & 0x3F] | des_sbox_4[((((v22 >> 1) | (v22 << 31)) >> 10) ^ 0xFFFFFFE3) & 0x3F] | des_sbox_1[((((v22 >> 1) | (v22 << 31)) >> 26) ^ 0xFFFFFFE6) & 0x3F] | des_sbox_3[((((v22 >> 1) | (v22 << 31)) ^ 0x4C00000) >> 22) & 0x3F] | des_sbox_8[((2 * v22 | (v22 >> 31)) ^ 0x12) & 0x3F]) ^ v20;
    *(unsigned int*)&buffer[20] = v23;
    v24 = (v23 >> 1) | (v23 << 31);
    v25 = (des_sbox_1[v24 >> 26] | des_sbox_2[((v24 ^ 0x78000) >> 14) & 0x3F] | des_sbox_4[((v24 >> 10) ^ 0xFFFFFFF3) & 0x3F] | des_sbox_6[((v24 >> 18) ^ 0xFFFFFFF2) & 0x3F] | des_sbox_5[((v24 >> 2) ^ 0xFFFFFFE5) & 0x3F] | des_sbox_3[((v24 >> 22) ^ 0xFFFFFFF2) & 0x3F] | des_sbox_7[((v24 ^ 0x440) >> 6) & 0x3F] | des_sbox_8[((2 * v23 | (v23 >> 31)) ^ 0xFFFFFFFB) & 0x3F]) ^ v22;
    v26 = (des_sbox_1[(((v25 >> 1) | (v25 << 31)) ^ 0x7C000000) >> 26]
		| des_sbox_7[((((v25 >> 1)
		| (v25 << 31)) >> 6) ^ 0xFFFFFFFD) & 0x3F]
		| des_sbox_2[((((v25 >> 1)
		| (v25 << 31)) >> 14) ^ 0xFFFFFFF4) & 0x3F]
		| des_sbox_4[((((v25 >> 1) | (v25 << 31)) >> 10) ^ 0xFFFFFFF1) & 0x3F]
		| des_sbox_5[((((v25 >> 1) | (v25 << 31)) >> 2) ^ 0xFFFFFFE9) & 0x3F]
		| des_sbox_6[((0x480000 ^ ((v25 >> 1) | (v25 << 31))) >> 18) & 0x3F]
		| des_sbox_3[((((v25 >> 1) | (v25 << 31)) ^ 0x800000) >> 22) & 0x3F]
		| des_sbox_8[((2 * v25 | (v25 >> 31)) ^ 0xFFFFFFFC) & 0x3F]) ^ v23;
    v27 = (v26 >> 1) | (v26 << 31);
    v28 = (des_sbox_5[~(v27 >> 2) & 0x3F]
		| des_sbox_1[((v27 >> 26) ^ 0xFFFFFFF5) & 0x3F]
		| des_sbox_6[((v27 >> 18) ^ 0xFFFFFFF0) & 0x3F]
		| des_sbox_2[((v27 >> 14) ^ 0xFFFFFFE8) & 0x3F]
		| des_sbox_3[((v27 >> 22) ^ 0xFFFFFFE8) & 0x3F]
		| des_sbox_7[((v27 ^ 0x640) >> 6) & 0x3F]
		| des_sbox_4[((((v26 >> 1) ^ 0x5000) >> 8) >> 2) & 0x3F]
		| des_sbox_8[((2 * v26 | (v26 >> 31)) ^ 0xFFFFFFFC) & 0x3F]) ^ v25;
    v29 = des_sbox_7[((((v28 >> 1) | (v28 << 31)) ^ 0x640) >> 6) & 0x3F] | des_sbox_8[((2 * v28 | (v28 >> 31)) ^ 0xFFFFFFFD) & 0x3F];
    *(unsigned int*)&buffer[20] = v26;
    v30 = (des_sbox_5[((((v28 >> 1) | (v28 << 31)) >> 2) ^ 0xFFFFFFF2) & 0x3F] | des_sbox_2[((((v28 >> 1) | (v28 << 31)) >> 14) ^ 0xFFFFFFF6) & 0x3F] | des_sbox_1[((((v28 >> 1) | (v28 << 31)) >> 26) ^ 0xFFFFFFF2) & 0x3F] | des_sbox_4[((((v28 >> 1) | (v28 << 31)) >> 10) ^ 0xFFFFFFE6) & 0x3F] | des_sbox_3[((((v28 >> 1) | (v28 << 31)) >> 22) ^ 0xFFFFFFEA) & 0x3F] | des_sbox_6[((((v28 >> 1) | (v28 << 31)) ^ 0x200000) >> 18) & 0x3F] | v29) ^ v26;
    v31 = (v30 >> 1) | (v30 << 31);
    v32 = (des_sbox_4[(((v31 ^ 0x4800) >> 8) >> 2) & 0x3F]
		| des_sbox_5[((v31 >> 2) ^ 0xFFFFFFFA) & 0x3F]
		| des_sbox_7[((v31 >> 6) ^ 0xFFFFFFF7) & 0x3F]
		| des_sbox_2[((v31 ^ 0x38000) >> 14) & 0x3F]
		| des_sbox_6[((v31 >> 18) ^ 0xFFFFFFF8) & 0x3F]
		| des_sbox_1[((v31 >> 26) ^ 0xFFFFFFEB) & 0x3F]
		| des_sbox_3[((v31 ^ 0x2400000) >> 22) & 0x3F]
		| des_sbox_8[((2 * v30 | (v30 >> 31)) ^ 0xFFFFFFF5) & 0x3F]) ^ v28;
    *(unsigned int*)&buffer[20] = v30;
    v33 = (des_sbox_1[(((v32 >> 1) | (v32 << 31)) ^ 0x60000000) >> 26] | des_sbox_4[((((v32 >> 1) | (v32 << 31)) ^ 0x3800) >> 10) & 0x3F] | des_sbox_7[((((v32 >> 1) | (v32 << 31)) >> 6) ^ 0xFFFFFFF6) & 0x3F] | des_sbox_5[((((v32 >> 1) | (v32 << 31)) >> 2) ^ 0xFFFFFFE6) & 0x3F] | des_sbox_2[((((v32 >> 1) | (v32 << 31)) >> 14) ^ 0xFFFFFFEA) & 0x3F] | des_sbox_3[((((v32 >> 1) | (v32 << 31)) >> 22) ^ 0xFFFFFFE3) & 0x3F] | des_sbox_6[((((v32 >> 1) | (v32 << 31)) ^ 0x240000) >> 18) & 0x3F] | des_sbox_8[((2 * v32 | (v32 >> 31)) ^ 0xFFFFFFFD) & 0x3F]) ^ v30;
    v34 = des_sbox_2[((((v33 >> 1) | (v33 << 31)) >> 14) ^ 0xFFFFFFF0) & 0x3F] | des_sbox_5[((((v33 >> 1) | (v33 << 31)) >> 2) ^ 0xFFFFFFE6) & 0x3F] | des_sbox_6[((((v33 >> 1) | (v33 << 31)) >> 18) ^ 0xFFFFFFF1) & 0x3F] | des_sbox_4[((((v33 >> 1) | (v33 << 31)) >> 10) ^ 0xFFFFFFE8) & 0x3F] | des_sbox_1[((((v33 >> 1) | (v33 << 31)) >> 26) ^ 0xFFFFFFEA) & 0x3F] | des_sbox_3[((((v33 >> 1) | (v33 << 31)) ^ 0x3400000) >> 22) & 0x3F];
    *(unsigned int*)&buffer[20] = v33;
    v35 = (des_sbox_7[((((v33 >> 1) | (v33 << 31)) >> 6) ^ 0xFFFFFFF5) & 0x3F] | v34 | des_sbox_8[((2 * v33 | (v33 >> 31)) ^ 0x17) & 0x3F]) ^ v32;
    v36 = des_sbox_2[((((v35 >> 1) | (v35 << 31)) ^ 0x48000) >> 14) & 0x3F] | des_sbox_6[((((v35 >> 1) | (v35 << 31)) ^ 0x40000) >> 18) & 0x3F] | des_sbox_7[((((v35 >> 1) | (v35 << 31)) >> 6) ^ 0xFFFFFFF2) & 0x3F] | des_sbox_5[((((v35 >> 1) | (v35 << 31)) >> 2) ^ 0xFFFFFFEF) & 0x3F] | des_sbox_4[((((v35 >> 1) | (v35 << 31)) >> 10) ^ 0xFFFFFFEF) & 0x3F] | des_sbox_1[((((v35 >> 1) | (v35 << 31)) >> 26) ^ 0xFFFFFFE5) & 0x3F] | des_sbox_3[((((v35 >> 1) | (v35 << 31)) ^ 0x7400000) >> 22) & 0x3F] | des_sbox_8[((2 * v35 | (v35 >> 31)) ^ 0x12) & 0x3F];
    *(unsigned int*)&buffer[20] = v35;
    *(unsigned int*)&buffer[16] = v36 ^ v33;
    buffer[23] = v35;
    buffer[16] = (v36 ^ v33) >> 24;
    buffer[19] = v36 ^ v33;
    v37 = buffer[17];
    buffer[20] = BYTE3(v35);
    buffer[17] = (v36 ^ v33) >> 16;
    LOBYTE(v34) = buffer[21];
    buffer[21] = BYTE2(v35);
    buffer[18] = v37;
    buffer[22] = v34;
    *(unsigned int*)&buffer[8] = *(unsigned int*)&buffer[16];
    *(unsigned int*)&buffer[12] = *(unsigned int*)&buffer[20];
    *(unsigned int*)buffer = 0;
    *(unsigned int*)&buffer[4] = 0;
    current_buf_ptr = &buffer[16];
    index_1 = 0;
    do
    {
      v40 = 8 * ((*current_buf_ptr & 0xF) - (*current_buf_ptr >> 4)) + 128;
	  //std::cout << "v40 = 0x" << std::hex << (int)v40 << std::dec << std::endl;
      byte_mask_1 = 8 * (index_1 + (*current_buf_ptr >> 4)) + unk_des_mask2;
      bits_1 = 8;
      v43 = buffer;
      do
      {
		//std::cout << "    byte_mask_1 = 0x" << std::hex << (int)byte_mask_1 << std::dec << std::endl;
        BYTE tmp_byte = *byte_mask_1 | *(v40 + byte_mask_1);
		//std::cout << "    bits_1 = 0x" << std::hex << (int)bits_1 << std::dec << std::endl;
		//std::cout << "    *v43 = 0x" << std::hex << (int)tmp_byte << std::dec << std::endl << std::endl;
		*v43++ |= tmp_byte;
		byte_mask_1 = byte_mask_1 + 1;
		--bits_1;
      }
      while ( bits_1 );
      index_1 += 32;
      ++current_buf_ptr;
    }
    while ( index_1 < 256 );
    index = 0;
    data_2 = data_1;
	*(buf + (21 - length_1)) = buffer[0] ^ *data_1;
	memcpy(&result_buffer[12], &result_buffer[13], 7u);
    result_buffer[19] = *data_2;
    data_1 = data_2 + 1;
    --length_1;

  }
  while ( length_1 );
  return bits_1;
}

int crc_lookup_table[1024] = {};
bool crc_lookup_table_initialized = false;

auto get_crc(char* buf, size_t size) -> unsigned int {
	print_buffer("[+] get_crc(buf): ", (unsigned char*)buf, size);
	println("[+] get_crc(buf): 01C72265A1E0AA94B19ACCD972118F68211865257A7522EC");
	std::cout << "[+] get_crc(length): " << size << std::endl;
	println("[+] get_crc(length): 24");

	if (!crc_lookup_table_initialized ){
		crc_lookup_table_initialized = true;

		auto index = 0;
		do {
			auto value = index << 24;
			auto bits = 8;
			do
			{
				if (value < 0) {
					value = (2 * value) ^ 0x8001801B;
				} else {
					value *= 2;
				}
				--bits;
			} while (bits);
			crc_lookup_table[index++] = value;
		} while (index < 256);
	}

	unsigned int result = 0;
	do {
		unsigned int index = (result >> 24) ^ *(unsigned char*)buf++;
		result = crc_lookup_table[index] ^ (result << 8);
		--size;
	} while (size);
	return result;
}

auto get_random_hash(unsigned char* buf, size_t size) -> void {
	const auto start_seed = 129;
	const auto multiplier = 0x343FD;
	const auto increment = 0x269EC3;

	auto seed = start_seed;
	for (auto i = 0; i < size; ++i) {
		seed = (seed * multiplier) + increment;
		*(buf + i) =  (seed >> 16) & 0xff;
	}
}

auto main() -> int {
	auto c = bdNew();
	auto m = bdNew();
	auto e = bdNew();
	auto n = bdNew();

	auto hwid = gehwid_t();
	//hwid = "010BE04D5A000000000037210000";
	//hwid = "010BE04D5A009B00000037210000";

	_ASSERT(strcmp(hwid.c_str(), "010BE04D5A009B00000037210000") == 0);
	//_ASSERT(hwid.compare("010BE04D5A000000000037210000") == 0);

	bdConvFromHex(n, securom_signatures[2]);
	bdConvFromHex(e, securom_signatures[3]);
	bdConvFromHex(m, hwid.c_str());

	// c = m^e mod n
	bdModExp(c, m, e, n);

	char buf[33];
	bdConvToHex(c, buf, sizeof(buf));

	bdFree(&c);
	bdFree(&m);
	bdFree(&e);
	bdFree(&n);

	std::cout << "[+] buf: " << buf << std::endl;
	println("[+] sho: aafcca83d2d9221f4b4475caeddf9");
	
	auto idx = 0;

	while (buf[idx] != NULL) {
		if (!buf[idx + 1]) {
			idx += 1;
			break;
		} else {
			idx += 2;
		}
	}

	buf[idx + 1] = 0;

	std::cout << "[+] idx: " << idx << std::endl;
	std::cout << "[+] buf: " << buf << std::endl;
	println("[+] sho: aafcca83d2d9221f4b4475caeddf9");

	auto max_length = 30;
	auto offset = max_length - idx;

	if ((offset & 0x80000000) != 0) {
		std::cout << "[-] invalid offset!" << std::endl;
		return 1;
	}

	auto new_idx = idx;

	if (max_length != idx) {
		do {
			auto v = buf + new_idx++;
			*v = 'f';
			--offset;
		} while (offset);
	}
	
	std::cout << "[+] idx: " << idx << std::endl;
	std::cout << "[+] ixx: 29" << std::endl;

	std::cout << "[+] new_idx: " << new_idx << std::endl;
	std::cout << "[+] new_ixx: " << new_idx << std::endl;

	std::cout << "[+] buf: " << buf << std::endl;
	println("[+] sho: aafcca83d2d9221f4b4475caeddf9f");

	convert_int_to_hex(idx, &buf[new_idx]);

	std::cout << "[+] buf: " << buf << std::endl;
	println("[+] sho: aafcca83d2d9221f4b4475caeddf9f1d");

	char sbuf[56] = {};
	auto sbufPtr = sbuf + 4;

	convert_hex_to_bytes(sbufPtr + 5, buf, 32);
	
	print_buffer("[+] sbufPtr: ", (unsigned char*)sbufPtr, sizeof(sbuf) - 4);
	println("[+] sbufPtr: 0000000000AAFCCA83D2D9221F4B4475CAEDDF9F1D00000000000000000000000000000000000000000000000000000000000000");

	for (auto i = 0; i < 16; ++i) {
		*(sbufPtr + 5 + i) ^= *(tron_signature + i);
	}

	print_buffer("[+] xsbufPtr: ", (unsigned char*)sbufPtr + 5, sizeof(sbuf) - 4 - 5);
	println("[+] xsbufPtr: 537FB09EF0F6466B638F66FADF0F4F110000000000000000000000000000000000000000000000");

	BYTE1(sbuf) = 0x01; // Unlock code activation count
	WORD1(*sbufPtr) = 0;
	BYTE4(*sbufPtr) = 0x00;
	HIWORD(sbuf) = 0x22C7; // Unlock code serial number time stamp

	MD5_CTX ctx = {};
	auto a = sizeof(ctx);

	MD5_Init(&ctx);
	MD5_Update(&ctx, tron_signature, sizeof(tron_signature));

	unsigned char data[32] = {};
	MD5_Final((unsigned char*)&data[0], &ctx);

	print_buffer("[+] data: ", data, sizeof(data));
	std::cout << "[+] shou: FDFB582E97D2A0AC950105EDEC5AA61F00000000000000000000000000000000" << std::endl  << std::endl;
	
	print_buffer("[+] before_xored_sbufPtr: ", (unsigned char*)sbufPtr, sizeof(sbuf) - 4);
	println("[+] before_xored_sbufPtr: 0000000000537FB09EF0F6466B638F66FADF0F4F110000000000000000000000000000000000000000000000");

	auto dataPtr = data;
	more_xoring((char*)dataPtr, 16, sbufPtr, 2u);

	print_buffer("[+] xored_sbufPtr: ", (unsigned char*)sbufPtr, 16);
	println("[+] xored_sbufPtr: 4802000000537FB09EF0F6466B638F66");

	// sigXored = cblock
	unsigned char sigXored[19] = {};
	for (auto i = 0; i < 16; ++i) {
		*(sigXored + i) = *(tron_signature + i) ^ *(tron_signature + i + (16 * 1)) ^ *(tron_signature + i + (16 * 2));
	}
	memcpy(sigXored + 16, buf, 3); // TODO: buf is after sigXored/cblock -> one byte is used for xoring

	print_buffer("[+] sigXored: ",sigXored, sizeof(sigXored));
	println("[+] sigXored: F9837A1D222F64744CD0D0A5A80B62DB");

	unsigned char des_buffer[21] = {}; // TODO: 19?
	memcpy(des_buffer, sbufPtr + 2, sizeof(des_buffer));
	
	print_buffer("[+] des_buffer: ", des_buffer, sizeof(des_buffer));
	println("[+] des_buffer: 48020000000B140AD61691106CC4AE788ABF7EFF11");

	encrypt_with_des(sigXored, sbufPtr + 2, (char*)des_buffer, sizeof(des_buffer) - 2);
	
	print_buffer("[+] des_buffer: ", des_buffer, sizeof(des_buffer));
	println("[+] des_buffer: 0F80FA61AE816125488D9A8E7152FDB02E0000");

	auto rounds = 0x20000;

	std::cout << "des_encrypt_with_sbox" << std::endl;
	
	// TODO: remove ueselss copy and save some memory
	unsigned char des_buffer2[64] = { *(sbufPtr + 0), *(sbufPtr + 1) };
	memcpy(des_buffer2 + 2, des_buffer, 19);
	
	do
	{
		for (auto i = 0; i < 8; ++i) {
			//print_buffer("[+] des_buffer2: ", des_buffer2, 21);
			//println("[+] des_buffer2: 480222AC0FD85C56B3779085D18E60C3C3A2133DB7");
			////println("[+] des_buffer2: 480222AC0F80FA61AE816125488D9A8E7152FDB02E");
			//print_buffer("[+] sbufPtr: ", (unsigned char*)sbufPtr, 21);
			//println("[+] sbufPtr: 48020000000B140AD61691106CC4AE788ABF7EFF11");
			//println("[+] sbufPtr: 4802000000537FB09EF0F6466B638F66FADF0F4F11");

			des_encrypt_with_sbox((BYTE*)des_buffer2, (BYTE*)sbufPtr, 21);

			//print_buffer("[+] des_buffer2: ", des_buffer2, 21);
			//println("[+] des_buffer2: 480222AC0F80FA61AE816125488D9A8E7152FDB02E");
			//print_buffer("[+] sbufPtr: ", (unsigned char*)sbufPtr, 21);
			//println("[+] sbufPtr: 65EEA820CA7E05D996D43B670132072AC088075DC9");
			//println("[+] sbufPtr: 65EEA820CA260F85C782DCCF7ED6EA9C6572D97E8D");

			des_encrypt_with_sbox((BYTE*)sbufPtr, (BYTE*)des_buffer2, 21);

			//return 0;
		}
		--rounds;
	} while (rounds);

	auto crc = get_crc(sbuf + 1, 24);

	std::cout << "[+] crc: " << std::hex << crc << std::dec << std::endl;
	println("[+] crc: dd17a846");

	print_buffer("[+] sbuf: ", (unsigned char*)sbuf, sizeof(sbuf));
	println("[+] sbuf: 0001C72265A1E0AA94B19ACCD972118F68211865257A7522ECFFFA02FCE9190046A817DD0000000000000000000000000000000074FFFA02");

	more_xoring((char*)&crc, 4, sbuf, 1u);

	print_buffer("[+] xored(sbuf): ", (unsigned char*)sbuf, sizeof(sbuf));
	println("[+] xored(sbuf): 2401C72265A1E0AA94B19ACCD972118F68211865257A7522ECFFFA02FCE9190046A817DD0000000000000000000000000000000074FFFA02");

	unsigned char seed[17] = {};
	get_random_hash(seed, sizeof(seed) - 1);

	// TODO: Like above cblock should always be 16 bytes but encrypt_with_des hashes it again.
	//       However, for some reason they also use one additional byte at the end from the stack.
	memcpy(seed + 16, sigXored, 1);

	print_buffer("[+] seed: ", (unsigned char*)seed, sizeof(seed));
	println("[+] seed: CB57D42C2BC90F0B1D8755F761E5FEF6B5");

	unsigned char data2[32] = {};
	encrypt_with_des(seed, sbuf, (char*)data2, 25);

	unsigned char v37[40] = {};

	figure_out_what_this_does_4(data2, 25, v37, sizeof(v37));

	print_buffer("[+] v37: ", (unsigned char*)v37, sizeof(v37));
	println("[+] v37: 1A0907141A1F1A01120D0417031F1612151E0C03060A011A0F170E1701150F1D03141515040E0F16");
	
	print_buffer("[+] des_buffer2: ", (unsigned char*)des_buffer2, 21);
	println("[+] des_buffer2: 480222AC0FD85C56B3779085D18E60C3C3A2133DB7E2957620A6FE002401C72265A1E0AA94B19ACC");

	decode_to_ascii((char*)v37, (char*)des_buffer2, sizeof(v37));
	
	print_buffer("[+] des_buffer2: ", (unsigned char*)des_buffer2, 21);
	println("[+] des_buffer2: 5542394E555A55334C463652355A514C50594535384333554852475233504858354E505036474851");

	char unlock_code_buffer[64] = {};
	insert_hyphens((char*)des_buffer2, unlock_code_buffer, 40, 5);

	print_buffer_ascii("[+] UC: ", (unsigned char*)unlock_code_buffer, sizeof(unlock_code_buffer));

	//_ASSERT(strcmp(unlock_code_buffer, "PKZA9-GUVLN-9ATMR-YGL9G-EVTG7-FC2PH-UDD43-K9G69") == 0);
	_ASSERT(strcmp(unlock_code_buffer, "UB9NU-ZU3LF-6R5ZQ-LPYE5-8C3UH-RGR3P-HX5NP-P6GHQ") == 0);

	std::cout << "[+] done" << std::endl;

	return 0;
}
